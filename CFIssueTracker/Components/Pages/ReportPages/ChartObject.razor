@using CFIssueTrackerCommon.Enums
@using CFIssueTrackerCommon.Interfaces
@using CFIssueTrackerCommon.Models
@inject IAuditEventMetricService AuditEventMetricService
@inject IIssueMetricService IssueMetricService
@inject IMetricsTypeService MetricsTypeService

@inject IJSRuntime JS
@rendermode InteractiveServer

<script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
<script>
    var myChartObject;

    async function createBarChart(controlId, chartLabel, chartLabels, chartData, backgroundColors) {

    // Clean up previous chart
    if(myChartObject)
    {
    myChartObject.destroy();
    }

    const ctx = document.getElementById(controlId);

    let newChart = new Chart(ctx, {
    type: 'bar',
    data: {
    labels: chartLabels,        //  ['Red', 'Blue', 'Yellow', 'Green', 'Purple', 'Orange'],
    datasets: [{
    label:  chartLabel,     // '# of Votes',
    data: chartData,      // [12, 19, 3, 5, 2, 3],
    backgroundColor: backgroundColors,
    borderWidth: 1
    }]
    },
    options: {
    responsive: true,
    scales: {
    y: {
    beginAtZero: true
    }
    }
    }
    });

    myChartObject = newChart;

    return newChart;
    }

    async function createBarChartV2(controlId, chartLabels, chartData, isStacked) {

    // Clean up previous chart
    if(myChartObject)
    {
    myChartObject.destroy();
    }

    const ctx = document.getElementById(controlId);

    // Create datasets
    // chartLabels contains array of Dimension1
    // chartData contains a 2D array of [Dimension2, Dimension2Color Value1, Value2    
    let datasetsObject = [];            
    for(var index = 0; index < chartData.length; index++) {                         
    datasetsObject.push({
    "label": chartData[index][0],
    "data": chartData[index].slice(2),        // Exclude label & color
    "backgroundColor": chartData[index][1]
    });                
    }

    //let isStacked = chartData.length > 1;  

    let newChart = new Chart(ctx, {
    type: 'bar',
    data: {
    labels: chartLabels,        
    datasets: datasetsObject
    },            
    options: {
    responsive: true,
    legend: {
    position: 'right' // place legend on the right side of chart
    },
    scales: {
    x: {
    stacked: isStacked // this should be set to make the bars stacked
    },
    y: {
    stacked: isStacked // this also..
    }
    }
    }       
    });

    myChartObject = newChart;

    return newChart;
    }

    async function createPieChart(controlId, chartLabels, chartData) {
    // Clean up previous chart
    if(myChartObject)
    {
    myChartObject.destroy();
    }

    const ctx = document.getElementById(controlId);

    // Create datasets
    // chartLabels contains array of Dimension1
    // chartData contains a 2D array of [Dimension2, Dimension2Color Value1, Value2
    let datasetsObject = [];
    for(var index = 0; index < chartData.length; index++) {
    datasetsObject.push({
    "label": chartData[index][0],
    "data": chartData[index].slice(2),        // Exclude label & color
    "backgroundColor": chartData[index][1]
    });
    }

    let newChart = new Chart(ctx, {
    type: 'pie',
    data: {
    labels: chartLabels,
    datasets: datasetsObject
    },
    options: {
    responsive: true,
    legend: {
    position: 'right' // place legend on the right side of chart
    }         
    }
    });

    myChartObject = newChart;

    return newChart;
    }

</script>
<canvas id="myChart"></canvas>

@code {
    private string _metricsTypeId = String.Empty;

    [Parameter]

    public string MetricsTypeId
    {
        get { return _metricsTypeId; }
        set
        {
            if (_metricsTypeId != value)
            {
                _metricsTypeId = value;

                Task.Factory.StartNew(() => DisplayChartAsync(MetricsTypeId, FromDateTime, ChartTypeId));
            }
        }
    }

    private DateTimeOffset _fromDateTime = DateTimeOffset.MinValue;

    [Parameter]
    public DateTimeOffset FromDateTime
    {
        get { return _fromDateTime;  }
        set
        {
            if (_fromDateTime != value)
            {
                _fromDateTime = value;

                Task.Factory.StartNew(() => DisplayChartAsync(MetricsTypeId, FromDateTime, ChartTypeId));
            }
        }
    }

    private string _chartTypeId = "1";  // Default
    [Parameter]
    public string ChartTypeId
    {
        get { return _chartTypeId; }    
        set
        {
            if (_chartTypeId != value)
            {
                _chartTypeId = value;

                Task.Factory.StartNew(() => DisplayChartAsync(MetricsTypeId, FromDateTime, ChartTypeId));
            }
        }
    }

    public List<MetricsType> MetricsTypes = new();

    protected override async Task OnInitializedAsync()
    {
        //MetricsTypes = await MetricsTypeService.GetAllAsync();
    }

    /// <summary>
    /// Gets issue metrics
    /// </summary>
    /// <param name="fromDateTime"></param>
    /// <param name="metricsType"></param>
    /// <returns></returns>
    private async Task<Metrics> GetIssueMetrics(DateTimeOffset fromDateTime, MetricsType metricsType)
    {
        // Create filter
        var filter = fromDateTime == DateTimeOffset.MinValue ?
                          new IssueFilter() :
                          new IssueFilter() { CreatedDateTimeFrom = fromDateTime };

        var metrics = await IssueMetricService.GetIssueCountAsync(filter, metricsType.DimensionPropertyNames.Split(',').ToList(), true);

        return metrics;
    }

    /// <summary>
    /// Gets audit event metrics
    /// </summary>
    /// <param name="fromDateTime"></param>
    /// <param name="metricsType"></param>
    /// <returns></returns>
    private async Task<Metrics> GetAuditEventMetrics(DateTimeOffset fromDateTime, MetricsType metricsType)
    {
        // Create filter
        var filter = fromDateTime == DateTimeOffset.MinValue ?
                          new AuditEventFilter() :
                          new AuditEventFilter() { CreatedDateTimeFrom = fromDateTime };

        var metrics = await AuditEventMetricService.GetAuditEventCountAsync(filter, metricsType.DimensionPropertyNames.Split(',').ToList(), true);

        return metrics;
    }

    /// <summary>
    /// Displays chart
    /// </summary>
    /// <param name="metricsTypeId">Metrics type</param>
    /// <param name="fromDateTime">From date time for data</param>
    /// <param name="chartTypeId">Chart type</param>
    /// <returns></returns>
    private async Task DisplayChartAsync(string metricsTypeId, DateTimeOffset fromDateTime, string chartTypeId)
    {
        if (!MetricsTypes.Any())
        {
            MetricsTypes = await MetricsTypeService.GetAllAsync();
        }
        var metricsType = MetricsTypes.FirstOrDefault(mt => mt.Id == metricsTypeId);        

        // Get metrics
        Metrics metrics = metricsType.EntityType switch
        {
            EntityTypes.AuditEvent => await GetAuditEventMetrics(fromDateTime, metricsType),
            EntityTypes.Issue => await GetIssueMetrics(fromDateTime, metricsType),
            _ => throw new ArgumentException($"Cannot get metrics for {metricsType.EntityType}")
        };

        // Get the dimensions        
        var dimensionNames = new List<List<string>>();
        for (int dimensionIndex =0; dimensionIndex < metrics.Items.Max(m => m.Dimensions.Count); dimensionIndex++)
        {
            dimensionNames.Add(metrics.Items.Select(i => (string)i.Dimensions[dimensionIndex]).Distinct().ToList());
        }

        // Iterate through every 2nd dimension and add the values for each 1st dimension.
        // E.g. If metrics are for User + Issue Status then we pass a chartData item for each status
        // and each item includes the values for the user
        var chartData = new List<object[]>();
        if (dimensionNames.Count == 1)    // Single dimension
        {
            // Difference from multiple dimensions is that background colour is an array of colors
            var chartDataDimension = new List<object>() { metricsType.Name };
            chartDataDimension.Add(metrics.Items.Select(m => $"rgba({metrics.DimensionColors[(string)m.Dimensions[0]]})").ToArray());
            chartDataDimension.AddRange(metrics.Items.Select(m => (object)m.Value).ToList());

            chartData.Add(chartDataDimension.ToArray());
        }
        else    // Multiple dimensions
        {
            foreach (var dimension2 in dimensionNames[1])      // Statuses
            {
                var chartDataDimension = new List<object>() { dimension2, $"rgba({metrics.DimensionColors[dimension2]})" };   // Will be [Label, Color, Value1, Value2 etc]

                foreach (var dimension1 in dimensionNames[0])  // Users
                {
                    var metric = metrics.Items.FirstOrDefault(i => (string)i.Dimensions[0] == dimension1 && (string)i.Dimensions[1] == dimension2);
                    chartDataDimension.Add(metric == null ? 0 : metric.Value);
                }

                chartData.Add(chartDataDimension.ToArray());
            }
        }

        // TODO: Clean this up
        switch(chartTypeId)
        {
            case "1":
                await JS.InvokeVoidAsync("createBarChartV2",
                       "myChart",
                       dimensionNames[0].ToArray(),
                       chartData.ToArray(),
                       false);    // Show stacked if multiple dimensions
                break;
            case "2":
                await JS.InvokeVoidAsync("createBarChartV2",
                          "myChart",
                          dimensionNames[0].ToArray(),
                          chartData.ToArray(),
                          true);
                break;
            case "3":
                await JS.InvokeVoidAsync("createPieChart",
                               "myChart",
                               dimensionNames[0].ToArray(),
                               chartData.ToArray());
                break;
        }

        // // Display chart
        // // TODO: Handle time period dimension (DateTimeOffset[])
        // await JS.InvokeVoidAsync("createPieChart",
        //               "myChart",
        //               dimensionNames[0].ToArray(),
        //               chartData.ToArray());

        // // Display chart
        // // TODO: Handle time period dimension (DateTimeOffset[])       
        // var isStacked = false;  // dimensionNames.Count > 1;
        // await JS.InvokeVoidAsync("createBarChartV2",
        //               "myChart",
        //               dimensionNames[0].ToArray(),
        //               chartData.ToArray(),
        //               isStacked);    // Show stacked if multiple dimensions
        
        // // TODO: Clean this up and make it generic
        // Metrics metrics = metricsType.Name switch
        // {
        //     "Issues By Assigned User" => await MetricService.GetIssueCountByAssignedUserMetricsAsync(issueFilter),
        //     "Issues By Created User" => await MetricService.GetIssueCountByCreatedUserMetricsAsync(issueFilter),
        //     "Issues By Project" => await MetricService.GetIssueCountByProjectMetricsAsync(issueFilter),
        //     "Issues By Status" => await MetricService.GetIssueCountByStatusMetricsAsync(issueFilter),
        //     "Issues By Type" => await MetricService.GetIssueCountByTypeMetricsAsync(issueFilter),
        //     _ => new Metrics()
        // };        

        // // Display chart
        // // TODO: Handle time period dimension (DateTimeOffset[])
        // await JS.InvokeVoidAsync("createBarChart",
        //               "myChart",
        //               metrics.Title,
        //               metrics.Items.Select(m => m.Dimensions[0]).ToArray(),
        //               metrics.Items.Select(m => m.Value).ToArray(),
        //               metrics.Items.Select(m => $"rgba({metrics.DimensionColors[(string)m.Dimensions[0]]})").ToArray());
    }
}
