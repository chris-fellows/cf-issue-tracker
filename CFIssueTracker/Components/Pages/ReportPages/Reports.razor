@page "/reports"
@using CFIssueTrackerCommon.Interfaces
@using CFIssueTrackerCommon.Models
@using CFUtilities.Utilities;
@inject IIssueService IssueService
@inject IIssueStatusService IssueStatusService
@inject IIssueTypeService IssueTypeService
@inject IMetricService MetricService
@inject IMetricsTypeService MetricsTypeService 
@inject IProjectComponentService ProjectComponentService
@inject IProjectService ProjectService
@inject IUserService UserService

@inject IJSRuntime JS

@rendermode InteractiveServer

<h3>Reports</h3>

<label for="metricstype">Report:</label>
<InputSelect @bind-Value="@MetricsTypeId">
    @foreach (MetricsType metricsType in MetricsTypes)
    {
        @if (metricsType.Id == MetricsTypeId)
        {
            <option selected value="@metricsType.Id">@metricsType.Name</option>
        }
        else
        {
            <option value="@metricsType.Id">@metricsType.Name</option>
        }
    }
</InputSelect>

<label for="periodtype">Period:</label>
<InputSelect @bind-Value="@MetricsFilterId">
    @foreach (MetricsFilter metricsFilter in MetricsFilters)
    {
        @if (metricsFilter.Id == MetricsFilterId)
        {
            <option selected value="@metricsFilter.Id">@metricsFilter.Name</option>
        }
        else
        {
            <option value="@metricsFilter.Id">@metricsFilter.Name</option>
        }
    }
</InputSelect>

<ChartObject MetricsTypeId="@MetricsTypeId" FromDateTime="@MetricsFilterFromDateTime"></ChartObject>

@code {
    private List<MetricsType> MetricsTypes = new();
    private List<MetricsFilter> MetricsFilters = new();
    private DateTimeOffset MetricsFilterFromDateTime = DateTimeOffset.MinValue;
    
    /// <summary>
    /// Filter for metrics. E.g. All time, current month etc
    /// </summary>
    private class MetricsFilter
    {
        public string Id { get; internal set;  }

        public string Name { get; internal set; }

        public DateTimeOffset FromDateTime { get; internal set; }

        public MetricsFilter(string id, string name, DateTimeOffset fromDateTime)
        {
            Id = id;
            Name = name;
            FromDateTime = fromDateTime;
        }
    }

    /// <summary>
    /// Selected metrics filter
    /// </summary>
    private string _metricsFilterId = String.Empty;
    public string MetricsFilterId
    {
        get { return _metricsFilterId; }
        set
        {
            if (_metricsFilterId != value)
            {
                _metricsFilterId = value;
                MetricsFilterFromDateTime = MetricsFilters.First(p => p.Id == _metricsFilterId).FromDateTime;
            }
        }
    }

    /// <summary>
    /// Selected metrics type
    /// </summary>
    private string _metricsTypeId = String.Empty;
    public string MetricsTypeId
    {
        get { return _metricsTypeId; }
        set
        {
            if (_metricsTypeId != null)
            {
                _metricsTypeId = value;       
            }
        }
    }

    protected override async Task OnInitializedAsync()
    {        
        MetricsTypes = MetricsTypeService.GetAll();
     
        MetricsFilters = new List<MetricsFilter>
        {
            new MetricsFilter("1", "All time", DateTimeOffset.MinValue),
            new MetricsFilter("2", "Current month", DateTimeUtilities.GetMonthStart()),
            new MetricsFilter("3", "Current year", DateTimeUtilities.GetYearStart())            
        };

        MetricsFilterId = MetricsFilters.First().Id;
        MetricsTypeId = MetricsTypes.First().Id;
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
         MetricsTypeId = MetricsTypes.First().Id;       
    }
}
