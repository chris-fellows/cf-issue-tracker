@page "/reports"
@using CFIssueTrackerCommon.Interfaces
@using CFIssueTrackerCommon.Models
@using CFIssueTracker.Utilities
@using CFUtilities.Utilities;
@inject IIssueService IssueService
@inject IIssueStatusService IssueStatusService
@inject IIssueTypeService IssueTypeService
@inject IMetricService MetricService
@inject IMetricsTypeService MetricsTypeService 
@inject IProjectComponentService ProjectComponentService
@inject IProjectService ProjectService
@inject IUserService UserService

@inject IJSRuntime JS

@rendermode InteractiveServer

<h3>Reports</h3>

<label for="metricstype">Report:</label>
<InputSelect @bind-Value="@MetricsTypeId">
    @foreach (MetricsType metricsType in MetricsTypes)
    {
        @if (metricsType.Id == MetricsTypeId)
        {
            <option selected value="@metricsType.Id">@metricsType.Name</option>
        }
        else
        {
            <option value="@metricsType.Id">@metricsType.Name</option>
        }
    }
</InputSelect>

<label for="periodtype">Period:</label>
<InputSelect @bind-Value="@MetricsFilterId">
    @foreach (DateRangeFilter dateRangeFilter in MetricsFilters)
    {
        @if (dateRangeFilter.Id == MetricsFilterId)
        {
            <option selected value="@dateRangeFilter.Id">@dateRangeFilter.Name</option>
        }
        else
        {
            <option value="@dateRangeFilter.Id">@dateRangeFilter.Name</option>
        }
    }
</InputSelect>

<label for="chartType">Chart:</label>
<InputSelect @bind-Value="@ChartTypeId">
    @foreach (ChartType chartType in ChartTypes)
    {
        @if (chartType.Id == ChartTypeId)
        {
            <option selected value="@chartType.Id">@chartType.Name</option>
        }
        else
        {
            <option value="@chartType.Id">@chartType.Name</option>
        }
    }
</InputSelect>

<ChartObject MetricsTypeId="@MetricsTypeId" FromDateTime="@MetricsFilterFromDateTime" ChartTypeId="@ChartTypeId"></ChartObject>

@code {
    private List<MetricsType> MetricsTypes = new();
    private List<DateRangeFilter> MetricsFilters = new();
    private List<ChartType> ChartTypes = new();
    private DateTimeOffset MetricsFilterFromDateTime = DateTimeOffset.MinValue;

    private class ChartType
    {
        public string Id { get; set; } = String.Empty;

        public string Name { get; set; } = String.Empty;
    }

    /// <summary>
    /// Selected metrics filter
    /// </summary>
    private string _metricsFilterId = String.Empty;
    public string MetricsFilterId
    {
        get { return _metricsFilterId; }
        set
        {
            if (_metricsFilterId != value)
            {
                _metricsFilterId = value;
                MetricsFilterFromDateTime = MetricsFilters.First(p => p.Id == _metricsFilterId).FromDate;
            }
        }
    }

    /// <summary>
    /// Selected metrics type
    /// </summary>
    private string _metricsTypeId = String.Empty;
    public string MetricsTypeId
    {
        get { return _metricsTypeId; }
        set
        {
            if (_metricsTypeId != value)
            {
                _metricsTypeId = value;       
            }
        }
    }

    private string _chartTypeId = String.Empty;
    public string ChartTypeId
    {
        get { return _chartTypeId; }
        set
        {
            if (_chartTypeId != value)
            {
                _chartTypeId = value;
            }
        }
    }

    private List<ChartType> GetChartTypes()
    {
        var chartTypes = new List<ChartType>()
        {
            new ChartType()
            {
                Id = "1",
                Name = "Bar chart"
            },
            new ChartType()
            {
                Id = "2",
                Name = "Stacked bar chart"
            },
            new ChartType()
            {
                Id = "3",
                Name = "Pie chart"
            }
        };

        return chartTypes;
    }

    protected override async Task OnInitializedAsync()
    {        
        MetricsTypes = MetricsTypeService.GetAll();
        ChartTypes = GetChartTypes();

        MetricsFilters = UIUtilities.GetDateRangeFilters();

        ChartTypeId = ChartTypes.First().Id;
        MetricsFilterId = MetricsFilters.First().Id;
        MetricsTypeId = MetricsTypes.First().Id;
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
         MetricsTypeId = MetricsTypes.First().Id;       
    }
}
