@using CFIssueTrackerCommon.Interfaces
@using CFIssueTrackerCommon.Models
@inject IMetricService MetricService
@inject IMetricsTypeService MetricsTypeService

@inject IJSRuntime JS
@rendermode InteractiveServer

<script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
<script>
    var myChartObject;

    async function createBarChart(controlId, chartLabel, chartLabels, chartData, backgroundColors) {

    // Clean up previous chart
    if(myChartObject)
    {
    myChartObject.destroy();
    }

    const ctx = document.getElementById(controlId);

    let barChart = new Chart(ctx, {
    type: 'bar',
    data: {
    labels: chartLabels,        //  ['Red', 'Blue', 'Yellow', 'Green', 'Purple', 'Orange'],
    datasets: [{
    label:  chartLabel,     // '# of Votes',
    data: chartData,      // [12, 19, 3, 5, 2, 3],
    backgroundColor: backgroundColors,
    borderWidth: 1
    }]
    },
    options: {
    scales: {
    y: {
    beginAtZero: true
    }
    }
    }
    });

    myChartObject = barChart;

    return barChart;
    }
</script>
<div>
    <canvas id="myChart"></canvas>
</div>

@code {
    private string _metricsTypeId = String.Empty;

    [Parameter]

    public string MetricsTypeId
    {
        get { return _metricsTypeId; }
        set
        {
            if (_metricsTypeId != value)
            {
                _metricsTypeId = value;

                Task.Factory.StartNew(() => DisplayChartAsync(MetricsTypeId, FromDateTime));
            }
        }
    }

    private DateTimeOffset _fromDateTime = DateTimeOffset.MinValue;

    [Parameter]
    public DateTimeOffset FromDateTime
    {
        get { return _fromDateTime;  }
        set
        {
            if (_fromDateTime != value)
            {
                _fromDateTime = value;

                Task.Factory.StartNew(() => DisplayChartAsync(MetricsTypeId, FromDateTime));
            }
        }
    }

    public List<MetricsType> MetricsTypes = new();

    protected override async Task OnInitializedAsync()
    {
        MetricsTypes = MetricsTypeService.GetAll();        
    }

    private async Task DisplayChartAsync(string metricsTypeId, DateTimeOffset fromDateTime)
    {
        var metricsType = MetricsTypes.First(mt => mt.Id == metricsTypeId);

        // Set issue filter
        var issueFilter = fromDateTime == DateTimeOffset.MinValue ?
                        new IssueFilter() :
                        new IssueFilter() { CreatedDateTimeFrom = fromDateTime };

        // TODO: Clean this up and make it generic
        Metrics metrics = metricsType.Name switch
        {
            "Issues By Assigned User" => await MetricService.GetIssueCountByAssignedUserMetricsAsync(issueFilter),
            "Issues By Created User" => await MetricService.GetIssueCountByCreatedUserMetricsAsync(issueFilter),
            "Issues By Project" => await MetricService.GetIssueCountByProjectMetricsAsync(issueFilter),
            "Issues By Status" => await MetricService.GetIssueCountByStatusMetricsAsync(issueFilter),
            "Issues By Type" => await MetricService.GetIssueCountByTypeMetricsAsync(issueFilter),
            _ => new Metrics()
        };

        // Display chart
        // TODO: Handle time period dimension (DateTimeOffset[])
        await JS.InvokeVoidAsync("createBarChart",
                      "myChart",
                      metrics.Title,
                      metrics.Items.Select(m => m.Dimensions[0]).ToArray(),
                      metrics.Items.Select(m => m.Value).ToArray(),
                      metrics.Items.Select(m => $"rgba({metrics.DimensionColors[(string)m.Dimensions[0]]})").ToArray());
    }
}
