@page "/projectcomponents"
@using Microsoft.EntityFrameworkCore
@using Microsoft.AspNetCore.Components.QuickGrid
@using CFIssueTrackerCommon.Data
@using CFIssueTrackerCommon.Interfaces;
@using CFIssueTrackerCommon.Models
@using CFIssueTracker.Data
@inject IDbContextFactory<CFIssueTrackerContext> DbFactory
@inject IProjectComponentService ProjectComponentService
@inject IProjectService ProjectService

@attribute [Authorize(Roles = "Administrator")]

<PageTitle>Index</PageTitle>

<h1>Project Component List</h1>

<p>
    <a href="projectcomponents/create">Create New</a>
</p>

<QuickGrid Class="table" Items="ProjectComponentsQueryable">
    <PropertyColumn Title="Project" Property="projectcomponent => GetProjectName(projectcomponent)" />
    <PropertyColumn Title="Name" Property="projectcomponent => projectcomponent.Name" />

    <TemplateColumn Title="Image" Context="projectcomponent">
        <img class="entityimage" src="../images/project_components/@projectcomponent.ImageSource" />
    </TemplateColumn>

    <TemplateColumn Context="projectcomponent">
        <a href="@($"projectcomponents/edit?id={projectcomponent.Id}")">Edit</a> |
        <a href="@($"projectcomponents/details?id={projectcomponent.Id}")">Details</a> |
        <a href="@($"projectcomponents/delete?id={projectcomponent.Id}")">Delete</a>
    </TemplateColumn>
</QuickGrid>

@code {
    //private CFIssueTrackerContext context = default!;

    private List<Project> Projects = new();

    private IQueryable<ProjectComponent>? ProjectComponentsQueryable;

    protected override void OnInitialized()
    {
        //context = DbFactory.CreateDbContext();

        Projects = ProjectService.GetAll();

        ProjectComponentsQueryable = ProjectComponentService.GetAll().AsQueryable();
    }

    private string GetProjectName(ProjectComponent projectComponent)
    {
        var project = Projects.FirstOrDefault(p => p.Id == projectComponent.ProjectId);
        if (project == null) return "";
        return project.Name;
    }

    // @implements IAsyncDisposable
    //public async ValueTask DisposeAsync() => await context.DisposeAsync();
}
