@page "/forgotpassword"
@using CFIssueTrackerCommon.Constants
@using CFIssueTrackerCommon.Email
@using CFIssueTrackerCommon.Models
@using CFIssueTrackerCommon.Interfaces
@using Microsoft.AspNetCore.Authentication
@using Microsoft.AspNetCore.Authentication.Cookies
@using System.Security.Claims

@inject NavigationManager NavigationManager
@inject IAuditEventService AuditEventService
@inject IAuditEventTypeService AuditEventTypeService
@inject IPasswordResetService PasswordResetService
@inject IRequestContextService RequestContextService
@inject ISystemValueTypeService SystemValueTypeService
@inject IUserService UserService

@rendermode InteractiveServer

<div clsss="row">
    <div class="col-lg-4 offset-lg-4 pt-4 pb-4 border">
        <EditForm Model="@Model" OnValidSubmit="CreatePasswordReset" FormName="ForgotForm">
            <DataAnnotationsValidator />
            <div class="mb-3 text-center flex-column">
                <img src="/images/avatar.png" style="max-height:5rem;" />
                <h3>Forgot Password</h3>
            </div>
            <div class="mb-3">
                <label>Enter Username</label>
                <InputText @bind-Value="Model.Username" class="form-control" placeholder="Username" />
                <ValidationMessage For="() => Model.Username" />
            </div>            
            <div class="mb-3 text-center">
                <span class="text-danger">@ErrorMessage</span>
            </div>
            <div class="mb-3 d-grid gap-2">
                <button type="submit" class="btn btn-primary">Reset</button>
            </div>
        </EditForm>
    </div>
</div>

@code {
    [CascadingParameter]
    public HttpContext? HttpContext { get; set; }

    [SupplyParameterFromForm]
    public LoginCredentials Model { get; set; } = new();

    private string? ErrorMessage;

    private async Task CreatePasswordReset()
    {                
        // Check if user valid
        var user = (await UserService.GetAllAsync()).FirstOrDefault(u => u.Email == Model.Username);

        if (user != null)
        {
            // Delete any existing password reset. If they click on the link in the email then we'll reject it.
            var passwordReset = await PasswordResetService.GetByUserIdAsync(user.Id);
            if (passwordReset != null)
            {
                await PasswordResetService.DeleteByIdAsync(passwordReset.Id);
            }

            // Create password reset                    
            passwordReset = new PasswordReset()
                {
                    Id = Guid.NewGuid().ToString(),
                    CreatedDateTime = DateTimeOffset.UtcNow,
                    ExpiresDateTime = DateTimeOffset.UtcNow.AddSeconds(3600),                    
                    ValidationId = $"{Guid.NewGuid().ToString()}{Guid.NewGuid().ToString()}" +
                                $"{Guid.NewGuid().ToString()}{Guid.NewGuid().ToString()}",
                    UserId = user.Id
                };
            passwordReset.Url = $"{HttpContext.Request.Path}/resetpassword?id={passwordReset.Id}&" +
                                $"validationid={passwordReset.ValidationId}";

            await PasswordResetService.AddAsync(passwordReset);

            // Create audit event
            await AddAuditEventPasswordResetCreatedAsync(passwordReset.Id);
        }

        ErrorMessage = "If the user name is valid then an email has been sent. Please check your email";
    }

    private async Task AddAuditEventPasswordResetCreatedAsync(string passwordResetId)
    {
        var auditEventType = await AuditEventTypeService.GetByNameAsync(AuditEventTypeNames.PasswordResetCreated);
        var systemValueTypePasswordResetId = await SystemValueTypeService.GetByNameAsync(SystemValueTypeNames.PasswordResetId);

        var auditEvent = new AuditEvent()
            {
                Id = Guid.NewGuid().ToString(),
                CreatedDateTime = DateTimeOffset.UtcNow,
                CreatedUserId = RequestContextService.UserId,
                TypeId = auditEventType.Id,
                Parameters = new List<AuditEventParameter>()
                    {
                        new AuditEventParameter()
                        {
                            Id = Guid.NewGuid().ToString(),
                            SystemValueTypeId = systemValueTypePasswordResetId.Id,
                            Value = passwordResetId
                        }
                    }
            };
        await AuditEventService.AddAsync(auditEvent);
    }
}
