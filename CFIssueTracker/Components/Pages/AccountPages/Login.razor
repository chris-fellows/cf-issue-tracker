@page "/login"
@using CFIssueTrackerCommon.Constants
@using CFIssueTrackerCommon.Models
@using CFIssueTrackerCommon.Interfaces
@using Microsoft.AspNetCore.Authentication
@using Microsoft.AspNetCore.Authentication.Cookies
@using System.Security.Claims

@inject NavigationManager NavigationManager
@inject IAuditEventService AuditEventService
@inject IAuditEventTypeService AuditEventTypeService
@inject IPasswordResetService PasswordResetService
@inject IRequestContextService RequestContextService
@inject ISystemValueTypeService SystemValueTypeService
@inject IUserService UserService

<div clsss="row">
    <div class="col-lg-4 offset-lg-4 pt-4 pb-4 border">
        <EditForm Model="@Model" OnValidSubmit="Authenticate" FormName="LoginForm">
            <DataAnnotationsValidator />
            <div class="mb-3 text-center flex-column">
                <img src="/images/avatar.png" style="max-height:5rem;"/>
                <h3>Login</h3>
            </div>
            <div class="mb-3">
                <label>Username</label>
                <InputText @bind-Value="Model.Username" class="form-control" placeholder="Username" />
                <ValidationMessage For="() => Model.Username" />
            </div>
            <div class="mb-3">
                <label>Password</label>
                <InputText @bind-Value="Model.Password" class="form-control" placeholder="Password" type="password" />
                <ValidationMessage For="() => Model.Password" />
            </div>
            <div class="mb-3 text-center">
                <span class="text-danger">@ErrorMessage</span>
            </div>
            <div class="mb-3 d-grid gap-2">
                <button type="submit" class="btn btn-primary">Log in</button>
            </div>
            <a href="/forgotpassword">Forgot Password</a>
        </EditForm>
    </div>
</div>

@code {
    [CascadingParameter]
    public HttpContext? HttpContext { get; set; }

    [SupplyParameterFromForm]
    public LoginCredentials Model { get; set; } = new();

    private string? ErrorMessage;

    private async Task Authenticate()
    {
        var user = await UserService.ValidateCredentialsAsync(Model.Username, Model.Password);
        if (user == null)
        {
            // Add audit event
            await AddAuditEventLogInErrorAsync(Model.Username);

            ErrorMessage = "Invalid username or password";
        }
        else
        {
            // If there's a password reset active then prevent login
            var passwordReset = await PasswordResetService.GetByUserIdAsync(user.Id);
            if (passwordReset == null)
            {
                // Add audit event
                await AddAuditEventLogInSuccessAsync(user.Id);

                // Create claims identity & principal
                var claims = new List<Claim>()
                {
                    new Claim(ClaimTypes.Name, user.Email),
                    new Claim(ClaimTypes.Role, user.Role)
                };
                var identity = new ClaimsIdentity(claims, CookieAuthenticationDefaults.AuthenticationScheme);
                var principal = new ClaimsPrincipal(identity);

                // Log in
                await HttpContext.SignInAsync(principal);
                NavigationManager.NavigateTo("/");
            }
            else
            {
                ErrorMessage = "A request to reset the password has been made. Please reset the password from the email.";
            }
        }
    }

    private async Task AddAuditEventLogInSuccessAsync(string userId)
    {        
        var auditEventType = await AuditEventTypeService.GetByNameAsync(AuditEventTypeNames.UserLogInSuccess);
        var systemValueTypeUserId = await SystemValueTypeService.GetByNameAsync(SystemValueTypeNames.UserId);

        var auditEvent = new AuditEvent()
            {
                Id = Guid.NewGuid().ToString(),
                CreatedDateTime = DateTimeOffset.UtcNow,
                CreatedUserId = userId,
                TypeId = auditEventType.Id,
                Parameters = new List<AuditEventParameter>()
                    {
                        new AuditEventParameter()
                        {
                            Id = Guid.NewGuid().ToString(),
                            SystemValueTypeId = systemValueTypeUserId.Id,
                            Value = userId
                        }
                    }
            };
        await AuditEventService.AddAsync(auditEvent);
    }

    private async Task AddAuditEventLogInErrorAsync(string username)
    {
        var auditEventType = await AuditEventTypeService.GetByNameAsync(AuditEventTypeNames.UserLogInError);
        var systemValueTypeNotes = await SystemValueTypeService.GetByNameAsync(SystemValueTypeNames.Notes);        
        
         var auditEvent = new AuditEvent()
            {
                Id = Guid.NewGuid().ToString(),
                CreatedDateTime = DateTimeOffset.UtcNow,
                CreatedUserId = RequestContextService.SystemUser.Id,  // User isn't authenticated
                TypeId = auditEventType.Id,                
                Parameters = new List<AuditEventParameter>()
                    {
                        new AuditEventParameter()
                        {
                            Id = Guid.NewGuid().ToString(),
                            SystemValueTypeId = systemValueTypeNotes.Id,
                            Value = username
                        }
                    }                    
            };
        await AuditEventService.AddAsync(auditEvent);
    }
}
