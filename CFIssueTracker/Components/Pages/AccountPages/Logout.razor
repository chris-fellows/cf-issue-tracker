@page "/logout"
@using Microsoft.AspNetCore.Authentication
@using CFIssueTrackerCommon.Constants
@using CFIssueTrackerCommon.Models
@using CFIssueTrackerCommon.Interfaces

@inject NavigationManager NavigationManager
@inject IAuditEventService AuditEventService
@inject IAuditEventTypeService AuditEventTypeService
@inject IRequestContextService RequestContextService
@inject ISystemValueTypeService SystemValueTypeService
@inject IUserService UserService

<div class="row">
    <div class="col-12">
        <div class="card">
            <div class="card-body flex-column">
                <div class="text-center">
                    <img src="/images/logout.png" style="max-height:5rem" />
                </div>
                <div class="text-center mt-2">
                    <span class="text-danger fw-bolder">You are logged out</span>
                </div>
            </div>
        </div>
    </div>
</div>

@code {
    [CascadingParameter]
    public HttpContext HttpContext { get; set; }

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();

        if (HttpContext.User.Identity.IsAuthenticated)
        {
            await AddAuditEventLogOutAsync(RequestContextService.UserId);

            await HttpContext.SignOutAsync();
            NavigationManager.NavigateTo("/logout", true);
        }
    }

    private async Task AddAuditEventLogOutAsync(string userId)
    {        
        var auditEventType = await AuditEventTypeService.GetByNameAsync(AuditEventTypeNames.UserLogOut);
        var systemValueTypeUserId = await SystemValueTypeService.GetByNameAsync(SystemValueTypeNames.UserId);

        var auditEvent = new AuditEvent()
            {
                Id = Guid.NewGuid().ToString(),
                CreatedDateTime = DateTimeOffset.UtcNow,
                CreatedUserId = RequestContextService.UserId,
                TypeId = auditEventType.Id,
                Parameters = new List<AuditEventParameter>()
                    {
                        new AuditEventParameter()
                        {
                            Id = Guid.NewGuid().ToString(),
                            SystemValueTypeId = systemValueTypeUserId.Id,
                            Value = userId
                        }
                    }
            };
        await AuditEventService.AddAsync(auditEvent);
    }
}
