@page "/projects/edit"
@using Microsoft.EntityFrameworkCore
@using CFIssueTrackerCommon.Data
@using CFIssueTrackerCommon.Interfaces
@using CFIssueTrackerCommon.Models
@using CFIssueTracker.Utilities
@inject NavigationManager NavigationManager
@inject IFileSecurityCheckerService FileSecurityCheckerService
@inject IProjectService ProjectService

@attribute [Authorize(Roles = "Administrator")]

<PageTitle>Edit</PageTitle>

<h1>Edit</h1>

<h2>Project</h2>
<hr />
@if (Project is null)
{
    <p><em>Loading...</em></p>
}
else
{
    <div class="row">
        <div class="col-md-4">
            <EditForm method="post" Model="Project" OnValidSubmit="UpdateProject" FormName="edit" Enhance>
                <DataAnnotationsValidator />
                <ValidationSummary role="alert"/>
                <input type="hidden" name="Project.Id" value="@Project.Id" />
                <div class="mb-3">
                    <label for="name" class="form-label">Name:</label>
                    <InputText id="name" @bind-Value="Project.Name" class="form-control" />
                    <ValidationMessage For="() => Project.Name" class="text-danger" />
                </div>
                <div class="mb-3">
                    <label for="usercolor" class="form-label">Color:</label>
                    <input id="usercolor " type="color" @bind-value="Project.Color" />
                    <ValidationMessage For="() => Project.Color" class="text-danger" />
                </div>
                <div class="mb-3">
                    <label for="projectimage" class="form-label">Image:</label>
                    <img id="projectimage" src="@GetProjectImageSource(Project)" />
                    <InputFile id="imagefile" OnChange="OnImageFileChangeAsync" />
                    <ValidationMessage For="() => Project.ImageSource" class="text-danger" />
                </div>
                <button type="submit" class="btn btn-primary">Save</button>
            </EditForm>
        </div>
    </div>
}

<div>
    <a href="/projects">Back to List</a>
</div>

@code {
    [SupplyParameterFromQuery]
    private string Id { get; set; }

    [SupplyParameterFromForm]
    private Project? Project { get; set; }

    private string _newImageFile = String.Empty;

    protected override async Task OnInitializedAsync()
    {
        //using var context = DbFactory.CreateDbContext();
        //Project ??= await context.Project.FirstOrDefaultAsync(m => m.Id == Id);
        Project = await ProjectService.GetByIdAsync(Id);

        if (Project is null)
        {
            NavigationManager.NavigateTo("notfound");
        }
    }

    // To protect from overposting attacks, enable the specific properties you want to bind to.
    // For more information, see https://learn.microsoft.com/aspnet/core/blazor/forms/#mitigate-overposting-attacks.
    private async Task UpdateProject()
    {
        //using var context = DbFactory.CreateDbContext();
        //context.Attach(Project!).State = EntityState.Modified;

        try
        {
            // Save image as [Project][Extension]
            if (!String.IsNullOrEmpty(_newImageFile))
            {
                Project.ImageSource = Path.GetFileName(_newImageFile);

                var localFile = Path.Combine(ConfigUtilities.ProjectImageLocalFolder, Project.ImageSource);
                if (File.Exists(localFile))
                {
                    File.Delete(localFile);
                }
                File.Move(_newImageFile, localFile);
                _newImageFile = "";
            }

            await ProjectService.UpdateAsync(Project);
            //await context.SaveChangesAsync();
        }
        catch (DbUpdateConcurrencyException)
        {
            if (!ProjectExists(Project!.Id))
            {
                NavigationManager.NavigateTo("notfound");
            }
            else
            {
                throw;
            }
        }

        NavigationManager.NavigateTo("/projects");
    }

    private bool ProjectExists(string id)
    {
        return ProjectService.GetByIdAsync(id).Result != null;
        //using var context = DbFactory.CreateDbContext();
        //return context.Project.Any(e => e.Id == id);
    }

    private string GetProjectImageSource(Project project)
    {
        return $"../images/projects/{project.ImageSource}";
    }

    private async Task OnImageFileChangeAsync(InputFileChangeEventArgs eventArgs)
    {
        // Check file size
        if (eventArgs.File.Size > ConfigUtilities.MaxUploadImageSize)
        {
            throw new ArgumentException("File is too big");
        }

        // Save to local file
        using (var stream = eventArgs.File.OpenReadStream())
        {
            _newImageFile = Path.Combine(ConfigUtilities.ImageTempFilesRootFolder, "projects", $"{Project.Id}{Path.GetExtension(eventArgs.File.Name)}");
            using (var streamWriter = new FileStream(_newImageFile, FileMode.Create))
            {
                await stream.CopyToAsync(streamWriter);
            }

            // Check that file can be uploaded
            var content = File.ReadAllBytes(_newImageFile);
            if (!(await FileSecurityCheckerService.ValidateCanUploadImageAsync(content)))
            {
                File.Delete(_newImageFile);
                _newImageFile = "";
            }
        }
    }
}
