@page "/issues/create"
@using Microsoft.EntityFrameworkCore
@using CFIssueTrackerCommon.Constants
@using CFIssueTrackerCommon.Data
@using CFIssueTrackerCommon.Interfaces
@using CFIssueTrackerCommon.Models
@inject IDbContextFactory<CFIssueTrackerContext> DbFactory
@inject NavigationManager NavigationManager

@inject IAuditEventService AuditEventService
@inject IAuditEventTypeService AuditEventTypeService
@inject IIssueService IssueService
@inject IIssueStatusService IssueStatusService
@inject IIssueTypeService IssueTypeService
@inject IProjectComponentService ProjectComponentService
@inject IProjectService ProjectService
@inject IRequestContextService RequestContextService
@inject ISystemValueTypeService SystemValueTypeService
@inject ITagService TagService
@inject IUserService UserService
@inject IRequestContextService RequestContextService

@attribute [Authorize(Roles = "Administrator,User")]

<PageTitle>Create</PageTitle>

<h1>Create</h1>

<h2>Issue</h2>
<hr />
<div class="row">
    <div class="col-md-4">
        <EditForm method="post" Model="Issue" OnValidSubmit="AddIssue" FormName="create" Enhance>
            <DataAnnotationsValidator />
            <ValidationSummary class="text-danger" role="alert"/>          

            <div class="mb-3">
                <label for="reference" class="form-label">Reference:</label> 
                <InputText id="reference" @bind-Value="Issue.Reference" class="form-control" /> 
                <ValidationMessage For="() => Issue.Reference" class="text-danger" /> 
            </div>        
            <div class="mb-3">
                <label for="description" class="form-label">Description:</label>                
                <InputTextArea id="description" @bind-Value="Issue.Description" class="form-control" />
                <ValidationMessage For="() => Issue.Description" class="text-danger" />
            </div>
            <div class="mb-3">
                <label for="projectid" class="form-label">ProjectId:</label>                  
                <ValidationMessage For="() => Issue.ProjectId" class="text-danger" />

                <InputSelect @bind-Value="Issue.ProjectId" class="form-control">
                    @foreach (Project project in Projects)
                    {
                        @if (project.Id == Issue.ProjectId)
                        {
                            <option selected value="@project.Id">@project.Name</option>
                        }
                        else
                        {
                            <option value="@project.Id">@project.Name</option>
                        }
                    }
                </InputSelect>
            </div>        
            <div class="mb-3">
                <label for="projectcomponentid" class="form-label">Component:</label>                
                <ValidationMessage For="() => Issue.ProjectComponentId" class="text-danger" />

                <InputSelect @bind-Value="Issue.ProjectComponentId" class="form-control">
                    @foreach (ProjectComponent projectComponent in ProjectComponents)
                    {
                        @if (projectComponent.Id == Issue.ProjectComponentId)
                        {
                            <option selected value="@projectComponent.Id">@projectComponent.Name</option>
                        }
                        else
                        {
                            <option value="@projectComponent.Id">@projectComponent.Name</option>
                        }
                    }
                </InputSelect>
            </div>        
            <div class="mb-3">
                <label for="typeid" class="form-label">Type:</label>                 
                <ValidationMessage For="() => Issue.TypeId" class="text-danger" />

                <InputSelect @bind-Value="Issue.TypeId" class="form-control">
                    @foreach (IssueType issueType in IssueTypes)
                    {
                        @if (issueType.Id == Issue.StatusId)
                        {
                            <option selected value="@issueType.Id">@issueType.Name</option>
                        }
                        else
                        {
                            <option value="@issueType.Id">@issueType.Name</option>
                        }
                    }
                </InputSelect>
            </div>                    
            <div class="mb-3">
                <label for="statusid" class="form-label">Status:</label>                 
                <ValidationMessage For="() => Issue.StatusId" class="text-danger" /> 

                <InputSelect @bind-Value="Issue.StatusId" class="form-control">
                    @foreach(IssueStatus issueStatus in IssueStatuses)
                    {
                        @if(issueStatus.Id == Issue.StatusId)
                        {
                            <option selected value="@issueStatus.Id">@issueStatus.Name</option>
                        }
                        else
                        {
                            <option value="@issueStatus.Id">@issueStatus.Name</option>
                        }
                    }
                </InputSelect>
            </div>        
            <div class="mb-3">
                <label for="createduserid" class="form-label">Created User:</label>                 
                <ValidationMessage For="() => Issue.CreatedUserId" class="text-danger" />

                <InputSelect @bind-Value="Issue.CreatedUserId" class="form-control">
                    @foreach (User user in Users)
                    {
                        @if (user.Id == Issue.CreatedUserId)
                        {
                            <option selected value="@user.Id">@user.Name</option>
                        }
                        else
                        {
                            <option value="@user.Id">@user.Name</option>
                        }
                    }
                </InputSelect>
            </div>        
            <div class="mb-3">
                <label for="createddatetime" class="form-label">Created Time:</label> 
                <InputDate id="createddatetime" @bind-Value="Issue.CreatedDateTime" class="form-control" /> 
                <ValidationMessage For="() => Issue.CreatedDateTime" class="text-danger" /> 
            </div>
            <div class="mb-3">
                <label for="assigneduserid" class="form-label">Assigned User:</label>                
                <ValidationMessage For="() => Issue.AssignedUserId" class="text-danger" />

                <InputSelect @bind-Value="Issue.AssignedUserId" class="form-control">
                    @foreach (User user in Users)
                    {
                        @if (user.Id == Issue.AssignedUserId)
                        {
                            <option selected value="@user.Id">@user.Name</option>
                        }
                        else
                        {
                            <option value="@user.Id">@user.Name</option>
                        }
                    }
                </InputSelect>
            </div>

            <div class="mb-3">
                @foreach (SelectableItem selectableTag in SelectableTags)
                {
                    <ToggleButton Text="@selectableTag.Name" Selected="@selectableTag.Selected" SelectedColor="Gray" UnselectedColor="Transparent" />
                }
            </div>      

            <button type="submit" class="btn btn-primary">Create</button>                        
        </EditForm>
    </div>
</div>

<div>
    <a href="/issues">Back to List</a>
</div>

@code {
    [SupplyParameterFromForm]
    private Issue Issue { get; set; } = new();

    // Inside form: <AntiforgeryToken />
    // A valid antiforgery token was not provided with the request. Add an antiforgery token, or disable antiforgery validation for this endpoint.

    private List<IssueStatus> IssueStatuses = new();
    private List<IssueType> IssueTypes = new();
    private List<ProjectComponent> ProjectComponents = new();
    private List<Project> Projects = new();
    private List<Tag> Tags = new();
    private List<User> Users = new();

    private string _oldAssignedUserId = String.Empty;

    //private string MySelectedUserId { get; set; } = String.Empty;
    //private int MySelectedInteger { get; set; } = 0;

    private List<SelectableItem> SelectableTags = new();


     /*
     *
     *   <ImageAndTextDropdown ImageSources="Users.Select(u => u.ImageSource).ToList()"
                            Texts="Users.Select(u => u.Name).ToList()"
                            Values="Users.Select(u => u.Id).ToList()"
       SelectedValue="@MySelectedUserId" />
                *

                    <div class="mb-3">
                    <ul>
                    @foreach (MyCheckboxOption tagOption in TagCheckboxOptions)
    {
                            <li>
                            <label for="@(tagOption.ClassId)" class="form-label">@tagOption.Tag.Name</label>
                            <InputCheckbox id="@(tagOption.ClassId)" @bind-Value="@tagOption.Selected" />
                    </li>
                }
            </ul>
     </div>
     *
     */

    protected override async Task OnParametersSetAsync()
    {
    _oldAssignedUserId = Issue.AssignedUserId;

    // Load data
    IssueStatuses = await IssueStatusService.GetAllAsync();
    IssueTypes = await IssueTypeService.GetAllAsync();
    ProjectComponents = await ProjectComponentService.GetAllAsync();
    Projects = await ProjectService.GetAllAsync();
    Tags = await TagService.GetAllAsync();
    Users = await UserService.GetAllAsync();

    // Initalise Issue to defaults
    Issue.StatusId = IssueStatuses.First(i => i.Name == "New").Id;
    Issue.TypeId = IssueTypes.First(i => i.Name == "Unknown").Id;
    Issue.ProjectId = Projects.First().Id;
    Issue.ProjectComponentId = ProjectComponents.First().Id;
    Issue.CreatedUserId = Users.First().Id;
    Issue.AssignedUserId = Users.First(u => u.Name == "System").Id;

    // Set selectable tags
    SelectableTags = Tags.Select(tag => new SelectableItem()
            {
                Id = tag.Id,
                Name = tag.Name,
                Selected = Issue.Tags != null && Issue.Tags.Any(it => it.TagId == tag.Id)
            }).ToList();

    await base.OnParametersSetAsync();
    }   

    // To protect from overposting attacks, see https://learn.microsoft.com/aspnet/core/blazor/forms/#mitigate-overposting-attacks.
    private async Task AddIssue()
    {
        //var tagsSelected = SelectableTags.Where(t => t.Selected).ToList();

        Issue.Id = Guid.NewGuid().ToString();
        Issue.CreatedDateTime = DateTimeOffset.UtcNow;
        Issue.CreatedUserId = RequestContextService.UserId;
        
        using var context = DbFactory.CreateDbContext();
        context.Issue.Add(Issue);
        await context.SaveChangesAsync();

        // Create Issue Created audit event
        await AddAuditEventIssueCreatedAsync(Issue.Id);

        // Create Issue Assigned audit event
        if (!String.IsNullOrEmpty(Issue.AssignedUserId))
        {
            await AddAuditEventIssueAssignedAsync(Issue.Id);
        }

        NavigationManager.NavigateTo("/issues");
    }   

    private async Task AddAuditEventIssueCreatedAsync(string issueId)
    {        
        var auditEventType = await AuditEventTypeService.GetByNameAsync(AuditEventTypeNames.IssueCreated);
        var systemValueTypeIssueId = await SystemValueTypeService.GetByNameAsync(SystemValueTypeNames.IssueId);

        var auditEvent = new AuditEvent()
            {
                Id = Guid.NewGuid().ToString(),
                CreatedDateTime = DateTimeOffset.UtcNow,
                CreatedUserId = RequestContextService.UserId,
                TypeId = auditEventType.Id,
                Parameters = new List<AuditEventParameter>()
                    {
                        new AuditEventParameter()
                        {
                            Id = Guid.NewGuid().ToString(),
                            SystemValueTypeId = systemValueTypeIssueId.Id,
                            Value = issueId
                        }
                    }
            };
        await AuditEventService.AddAsync(auditEvent);
    }

    private async Task AddAuditEventIssueAssignedAsync(string issueId)
    {
        var auditEventType = await AuditEventTypeService.GetByNameAsync(AuditEventTypeNames.IssueAssigned);
        var systemValueTypeIssueId = await SystemValueTypeService.GetByNameAsync(SystemValueTypeNames.IssueId);

        var auditEvent = new AuditEvent()
            {
                Id = Guid.NewGuid().ToString(),
                CreatedDateTime = DateTimeOffset.UtcNow,
                CreatedUserId = RequestContextService.UserId,
                TypeId = auditEventType.Id,
                Parameters = new List<AuditEventParameter>()
                    {
                        new AuditEventParameter()
                        {
                            Id = Guid.NewGuid().ToString(),
                            SystemValueTypeId = systemValueTypeIssueId.Id,
                            Value = issueId
                        }
                    }
            };
        await AuditEventService.AddAsync(auditEvent);
    }
}
