@page "/issues"
@using Microsoft.EntityFrameworkCore
@using Microsoft.AspNetCore.Components.QuickGrid
@using CFIssueTrackerCommon.Data
@using CFIssueTrackerCommon.EntityWriter
@using CFIssueTrackerCommon.Interfaces
@using CFIssueTrackerCommon.Models
@using CFIssueTracker.Data
@using CFIssueTracker.Utilities
@using CFUtilities
@using CFUtilities.Utilities
@inject IDbContextFactory<CFIssueTrackerContext> DbFactory
@inject IIssueService IssueService
@inject IIssueStatusService IssueStatusService
@inject IIssueTypeService IssueTypeService
@inject IProjectComponentService ProjectComponentService
@inject IProjectService ProjectService
@inject IUserService UserService

@using System.IO
@inject IJSRuntime JS

@rendermode InteractiveServer  
@attribute [StreamRendering]   
@attribute [Authorize(Roles = "Administrator,User")]

<script>
    window.downloadFileFromStream = async (fileName, contentStreamReference) =>
    {
        const arrayBuffer = await contentStreamReference.arrayBuffer();
        const blob = new Blob([arrayBuffer]);
        const url = URL.createObjectURL(blob);
        const anchorElement = document.createElement('a');
        anchorElement.href = url;
        anchorElement.download = fileName ?? '';
        anchorElement.click();
        anchorElement.remove();
        URL.revokeObjectURL(url);
    }
</script>

<PageTitle>Index</PageTitle>

<h1>Issue List</h1>

<ActivityIndicator IsBusy="@IsBusy" />

<p>
    <a href="issues/create">Create New</a>
    <button @onclick="DownloadCSVAsync" class="btn btn-primary">Download</button>
    <button @onclick="ResetFiltersAsync" class="btn btn-primary">Reset Filters</button>

    <br/>
    <div style="display: inline-block">
        <SearchBar OnSearch="OnReferenceSearch" SearchPlaceholder="Reference..." />
        
        <label for="projectid">Project:</label>
        <InputSelect @bind-Value="@FilterProjectId">
            @foreach (Project project in Projects)
            {
                <option value="@project.Id">@project.Name</option>
            }
        </InputSelect>

        <label for="issuestatusid">Status:</label>
        <InputSelect @bind-Value="@FilterIssueStatusId">
            @foreach (IssueStatus issueStatus in IssueStatuses)
            {
                <option value="@issueStatus.Id">@issueStatus.Name</option>
            }
        </InputSelect>

        <label for="issuetypeid">Type:</label>
        <InputSelect @bind-Value="@FilterIssueTypeId">
            @foreach (IssueType issueType in IssueTypes)
            {            
                <option value="@issueType.Id">@issueType.Name</option>            
            }
        </InputSelect>

        <label for="createduserid">Created User:</label>
        <InputSelect @bind-Value="@FilterCreatedUserId">
            @foreach (User user in Users)
            {
                <option value="@user.Id">@user.Name</option>
            }
        </InputSelect>

        <label for="assigneduserid">Assigned User:</label>
        <InputSelect @bind-Value="@FilterAssignedUserId">
            @foreach (User user in Users)
            {
                <option value="@user.Id">@user.Name</option>
            }
        </InputSelect>

        <label for="createdate">Created Time:</label>
        <InputSelect @bind-Value="@FilterCreatedDateRangeId">
            @foreach (DateRangeFilter dateRangeFilter in CreatedDateRangeFilters)
            {
                <option value="@dateRangeFilter.Id">@dateRangeFilter.Name</option>
            }
        </InputSelect>
    </div>
</p>

@if (IssuesQueryable == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <QuickGrid Class="table" Items="@IssuesQueryable" Pagination="@Pagination">
        <PropertyColumn Property="issue => issue.Reference" />

        <TemplateColumn Title="Project" Context="issue">
            <ImageAndText ImageSource="@(GetProjectImageSource(issue))" Text="@(GetProjectName(issue))" />
        </TemplateColumn>

        <TemplateColumn Title="Component" Context="issue">
            <ImageAndText ImageSource="@(GetProjectComponentImageSource(issue))" Text="@(GetProjectComponentName(issue))" />
        </TemplateColumn>

        <TemplateColumn Title="Type" Context="issue">
            <ColoredLabel BackColor="@(GetIssueTypeColor(issue))" Text="@(GetIssueTypeName(issue))" />
        </TemplateColumn>

        <TemplateColumn Title="Status" Context="issue">
            <ColoredLabel BackColor="@(GetIssueStatusColor(issue))" Text="@(GetIssueStatusName(issue))" />
        </TemplateColumn>

        <TemplateColumn Title="Created User" Context="issue">
            <ImageAndText ImageSource="@(GetCreatedUserImageSource(issue))" Text="@(GetCreatedUserName(issue))" />
        </TemplateColumn>

        <PropertyColumn Title="Created Time" Property="issue => issue.CreatedDateTime" />        

        <TemplateColumn Title="Assigned User" Context="issue">
            <ImageAndText ImageSource="@(GetAssignedUserImageSource(issue))" Text="@(GetAssignedUserName(issue))" />
        </TemplateColumn>

        <TemplateColumn Context="issue">
            <a href="@($"issues/edit?id={issue.Id}")">Edit</a> |
            <a href="@($"issues/details?id={issue.Id}")">Details</a> |
            <a href="@($"issues/delete?id={issue.Id}")">Delete</a>
        </TemplateColumn>
    </QuickGrid>

    <Paginator State="@Pagination" />
}

@code {
    private PaginationState Pagination = new PaginationState() { ItemsPerPage = ConfigUtilities.ItemsPerListPage };

    private IQueryable<Issue>? IssuesQueryable;

    private List<DateRangeFilter> CreatedDateRangeFilters = new();

    private bool IsBusy { get; set; } = false;        

    private void OnReferenceSearch(object sender, object parameters)
    {
        FilterReference = (string)parameters;

        StateHasChanged();
    }

    private void RefreshIssues()
    {
        IsBusy = true;

        IssuesQueryable = IssueService.GetByFilter(GetIssueFilter())
                            .OrderBy(i => i.CreatedDateTime)
                            .AsQueryable();

        IsBusy = false;                
    }

    private async Task RefreshIssuesAsync()
    {
        IsBusy = true;

        IssuesQueryable = (await IssueService.GetByFilterAsync(GetIssueFilter()))
                            .OrderBy(i => i.CreatedDateTime)
                            .AsQueryable();                            

        IsBusy = false;
    }

    // Filter on created
    private string _filterCreatedDateRangeId = String.Empty;
    public string FilterCreatedDateRangeId
    {
        get { return _filterCreatedDateRangeId; }
        set
        {
            if (_filterCreatedDateRangeId != value)
            {
                _filterCreatedDateRangeId = value;
                RefreshIssues();
                //Task.Factory.StartNew(() => RefreshIssuesAsync(true));
            }
        }
    }

    // Filter on reference
    private string _filterReference = String.Empty;
    public string FilterReference
    {
        get { return _filterReference; }
        set
        {
            if (_filterReference != value)
            {
                _filterReference = value;
                RefreshIssues();
                //Task.Factory.StartNew(() => RefreshIssuesAsync(true));                
            }
        }
    }

    // Filter on assigned user
    private string _filterAssignedUserId = UIUtilities.AnyId;
    public string FilterAssignedUserId
    {
        get { return _filterAssignedUserId; }
        set
        {
            if (_filterAssignedUserId != value)
            {
                _filterAssignedUserId = value;
                RefreshIssues();
                //Task.Factory.StartNew(() => RefreshIssuesAsync(true));
            }
        }
    }

    // Filter on created user
    private string _filterCreatedUserId = UIUtilities.AnyId;
    public string FilterCreatedUserId
    {
        get { return _filterCreatedUserId; }
        set
        {
            if (_filterCreatedUserId != value)
            {
                _filterCreatedUserId = value;
                RefreshIssues();
                //Task.Factory.StartNew(() => RefreshIssuesAsync(true));
            }
        }
    }

    // Filter on project
    private string _filterProjectId = UIUtilities.AnyId;
    public string FilterProjectId
    {
        get { return _filterProjectId; }
        set
        {
            if (_filterProjectId != value)
            {
                _filterProjectId = value;
                RefreshIssues();
                //Task.Factory.StartNew(() => RefreshIssuesAsync(true));
            }
        }
    }

    // Filter on issue type
    private string _filterIssueTypeId = UIUtilities.AnyId;
    public string FilterIssueTypeId 
    {
        get { return _filterIssueTypeId; }
        set
        {
            if (_filterIssueTypeId != value)
            {
                _filterIssueTypeId = value;
                RefreshIssues();             
            }
        }
    }

    // Filter on issue status
    private string _filterIssueStatusId = UIUtilities.AnyId;
    public string FilterIssueStatusId
    {
        get { return _filterIssueStatusId; }
        set
        {
            if (_filterIssueStatusId != value)
            {
                _filterIssueStatusId = value;
                RefreshIssues();
                //Task.Factory.StartNew(() => RefreshIssuesAsync(true));
            }
        }
    }

    private List<IssueStatus> IssueStatuses = new();
    private List<IssueType> IssueTypes = new();
    private List<ProjectComponent> ProjectComponents = new();
    private List<Project> Projects = new();
    private List<User> Users = new();

    protected override async Task OnInitializedAsync()
    {
        IsBusy = true;

        IssueStatuses = await IssueStatusService.GetAllAsync();
        IssueTypes = await IssueTypeService.GetAllAsync();
        ProjectComponents = await ProjectComponentService.GetAllAsync();
        Projects = await ProjectService.GetAllAsync();
        Users = await UserService.GetAllAsync();

        CreatedDateRangeFilters = UIUtilities.GetDateRangeFilters();
        _filterCreatedDateRangeId  = CreatedDateRangeFilters.First().Id;

        // Add "Any" to filters
        UIUtilities.AddAny(IssueStatuses);
        UIUtilities.AddAny(IssueTypes);
        UIUtilities.AddAny(ProjectComponents);
        UIUtilities.AddAny(Projects);
        UIUtilities.AddAny(Users);

        await RefreshIssuesAsync();        
    } 

    private string GetIssueStatusColor(Issue issue)
    {
        return HTMLUtilities.GetHTMLColor(IssueStatuses.First(s => s.Id == issue.StatusId).Color);
    }

    private string GetIssueStatusName(Issue issue)
    {
        return IssueStatuses.First(s => s.Id == issue.StatusId).Name;
    }

    private string GetIssueTypeColor(Issue issue)
    {
        return HTMLUtilities.GetHTMLColor(IssueTypes.First(t => t.Id == issue.TypeId).Color);
    }

    private string GetIssueTypeName(Issue issue)
    {
        return IssueTypes.First(t => t.Id == issue.TypeId).Name;
    }

    // private string GetProjectColor(Issue issue)
    // {
    //     return Projects.First(p => p.Id == issue.ProjectId).Color;
    // }

    private string GetProjectName(Issue issue)
    {            
        return Projects.First(p => p.Id == issue.ProjectId).Name;
    }

    private string GetProjectImageSource(Issue issue)
    {
        return $"../images/projects/{Projects.First(p => p.Id == issue.ProjectId).ImageSource}";
    }

    private string GetProjectComponentName(Issue issue)
    {        
        return ProjectComponents.First(c => c.Id == issue.ProjectComponentId).Name;
    }

    private string GetProjectComponentImageSource(Issue issue)
    {
        return $"../images/project_components/{ProjectComponents.First(c => c.Id == issue.ProjectComponentId).ImageSource}";
    }

    private string GetCreatedUserColor(Issue issue)
    {
        return HTMLUtilities.GetHTMLColor(Users.First(u => u.Id == issue.CreatedUserId).Color);
    }

    private string GetCreatedUserName(Issue issue)
    {        
        return Users.First(u => u.Id == issue.CreatedUserId).Name;
    }

    private string GetCreatedUserImageSource(Issue issue)
    {
        return $"../images/users/{Users.First(u => u.Id == issue.CreatedUserId).ImageSource}";
    }

    private string GetAssignedUserColor(Issue issue)
    {
        return HTMLUtilities.GetHTMLColor(Users.First(u => u.Id == issue.AssignedUserId).Color);
    }

    private string GetAssignedUserName(Issue issue)
    {     
        return Users.First(u => u.Id == issue.AssignedUserId).Name;
    }  

    private string GetAssignedUserImageSource(Issue issue)
    {
        return $"../images/users/{Users.First(u => u.Id == issue.AssignedUserId).ImageSource}";
    }

    private async Task DownloadCSVAsync()
    {        
        using (var session = new DisposableActionsSession())
        {
            IsBusy = true;
            session.AddAction(() => IsBusy = false);

            // Get file stream
            var tempFile = Path.GetTempFileName();
            session.AddAction(() =>
            {
                if (File.Exists(tempFile)) File.Delete(tempFile);            
            });

            var entityWriter = new CSVIssueWriter(tempFile, (Char)9, System.Text.Encoding.UTF8,
                                IssueStatusService, IssueTypeService,
                                ProjectComponentService, ProjectService, 
                                UserService);          
            entityWriter.Write(IssuesQueryable.ToList());
            var fileStream = File.OpenRead(tempFile);

            using var streamRef = new DotNetStreamReference(stream: fileStream);

            await JS.InvokeVoidAsync("downloadFileFromStream", "Issues.txt", streamRef);
        }
    }

    private async Task ResetFiltersAsync()
    {
        _filterCreatedDateRangeId = CreatedDateRangeFilters.First().Id;
        _filterReference = "";
        _filterAssignedUserId = UIUtilities.AnyId;
        _filterCreatedUserId = UIUtilities.AnyId;
        _filterIssueStatusId = UIUtilities.AnyId;
        _filterIssueTypeId = UIUtilities.AnyId;
        _filterProjectId = UIUtilities.AnyId;

        await RefreshIssuesAsync();
    }

    private IssueFilter GetIssueFilter()
    {
        var createdDateRange = this.CreatedDateRangeFilters.First(f => f.Id == FilterCreatedDateRangeId);

        // Set filter
        var issueFilter = new IssueFilter()
            {
                AssignedUserIds = FilterAssignedUserId == UIUtilities.AnyId ? null : new() { FilterAssignedUserId },
                CreatedDateTimeFrom = createdDateRange.FromDate == DateTimeOffset.MinValue ? null : createdDateRange.FromDate,
                CreatedDateTimeTo = createdDateRange.ToDate == DateTimeOffset.MaxValue ? null : createdDateRange.ToDate,
                CreatedUserIds = FilterCreatedUserId == UIUtilities.AnyId ? null : new() { FilterCreatedUserId },
                IssueStatusIds  = FilterIssueStatusId == UIUtilities.AnyId ? null : new() { FilterIssueStatusId },
                IssueTypeIds  = FilterIssueTypeId == UIUtilities.AnyId ? null : new() { FilterIssueTypeId },
                ProjectIds = FilterProjectId == UIUtilities.AnyId ? null : new() { FilterProjectId },
                ReferencePartial = String.IsNullOrEmpty(FilterReference) ? null : FilterReference
            };
        return issueFilter;
    }

    // @implements IAsyncDisposable
    //public async ValueTask DisposeAsync() => ();
    //public async ValueTask DisposeAsync() => await context.DisposeAsync();
}
