@page "/issues/edit"
@using Microsoft.EntityFrameworkCore
@using CFIssueTrackerCommon.Data
@using CFIssueTrackerCommon.Interfaces
@using CFIssueTrackerCommon.Models
@inject IDbContextFactory<CFIssueTrackerContext> DbFactory
@inject NavigationManager NavigationManager

@inject IEmailRequestService EmailRequestService
@inject IIssueCommentService IssueCommentService
@inject IIssueService IssueService
@inject IIssueStatusService IssueStatusService
@inject IIssueTypeService IssueTypeService
@inject IProjectComponentService ProjectComponentService
@inject IProjectService ProjectService
@inject ITagService TagService
@inject IUserService UserService
@inject IRequestContextService RequestContextService

@attribute [Authorize(Roles = "Administrator,User")]

<PageTitle>Edit</PageTitle>

<h1>Edit</h1>

<h2>Issue</h2>
<hr />
@if (Issue is null)
{
    <p><em>Loading...</em></p>
}
else
{
    <div class="row">
        <div class="col-md-4">
            <EditForm method="post" Model="Issue" OnValidSubmit="UpdateIssue" FormName="edit" Enhance>
                <DataAnnotationsValidator />
                <ValidationSummary role="alert"/>
                <input type="hidden" name="Issue.Id" value="@Issue.Id" />
                <div class="mb-3">
                    <label for="reference" class="form-label">Reference:</label>
                    <InputText id="reference" @bind-Value="Issue.Reference" class="form-control" />
                    <ValidationMessage For="() => Issue.Reference" class="text-danger" />
                </div>
                <div class="mb-3">
                    <label for="description" class="form-label">Description:</label>
                    <InputText id="description" @bind-Value="Issue.Description" class="form-control" />
                    <ValidationMessage For="() => Issue.Description" class="text-danger" />
                </div>
                <div class="mb-3">
                    <label for="projectid" class="form-label">Project:</label>                    
                    <ValidationMessage For="() => Issue.ProjectId" class="text-danger" />

                    <InputSelect @bind-Value="Issue.ProjectId" class="form-control">
                        @foreach (Project project in Projects)
                        {
                            @if (project.Id == Issue.ProjectId)
                            {
                                <option selected value="@project.Id">@project.Name</option>
                            }
                            else
                            {
                                <option value="@project.Id">@project.Name</option>
                            }
                        }
                    </InputSelect>
                </div>
                <div class="mb-3">
                    <label for="projectcomponentid" class="form-label">Component:</label>                    
                    <ValidationMessage For="() => Issue.ProjectComponentId" class="text-danger" />

                    <InputSelect @bind-Value="Issue.ProjectComponentId" class="form-control">
                        @foreach (ProjectComponent projectComponent in ProjectComponents)
                        {
                            @if (projectComponent.Id == Issue.ProjectComponentId)
                            {
                                <option selected value="@projectComponent.Id">@projectComponent.Name</option>
                            }
                            else
                            {
                                <option value="@projectComponent.Id">@projectComponent.Name</option>
                            }
                        }
                    </InputSelect>
                </div>
                <div class="mb-3">
                    <label for="typeid" class="form-label">Type:</label>                    
                    <ValidationMessage For="() => Issue.TypeId" class="text-danger" />

                    <InputSelect @bind-Value="Issue.TypeId" class="form-control">
                        @foreach (IssueType issueType in IssueTypes)
                        {
                            @if (issueType.Id == Issue.StatusId)
                            {
                                <option selected value="@issueType.Id">@issueType.Name</option>
                            }
                            else
                            {
                                <option value="@issueType.Id">@issueType.Name</option>
                            }
                        }
                    </InputSelect>
                </div>
                <div class="mb-3">
                    <label for="statusid" class="form-label">Status:</label>                    
                    <ValidationMessage For="() => Issue.StatusId" class="text-danger" />

                    <InputSelect @bind-Value="Issue.StatusId" class="form-control">
                        @foreach (IssueStatus issueStatus in IssueStatuses)
                        {
                            @if (issueStatus.Id == Issue.StatusId)
                            {
                                <option selected value="@issueStatus.Id">@issueStatus.Name</option>
                            }
                            else
                            {
                                <option value="@issueStatus.Id">@issueStatus.Name</option>
                            }
                        }
                    </InputSelect>
                </div>
                <div class="mb-3">
                    <label for="createduserid" class="form-label">Created User:</label>                    
                    <ValidationMessage For="() => Issue.CreatedUserId" class="text-danger" />

                    <InputSelect @bind-Value="Issue.CreatedUserId" class="form-control">
                        @foreach (User user in Users)
                        {
                            @if (user.Id == Issue.CreatedUserId)
                            {
                                <option selected value="@user.Id">@user.Name</option>
                            }
                            else
                            {
                                <option value="@user.Id">@user.Name</option>
                            }
                        }
                    </InputSelect>
                </div>
                <div class="mb-3">
                    <label for="createddatetime" class="form-label">Created Time:</label>
                    <InputDate id="createddatetime" @bind-Value="Issue.CreatedDateTime" class="form-control" />
                    <ValidationMessage For="() => Issue.CreatedDateTime" class="text-danger" />
                </div>
                <div class="mb-3">
                    <label for="assigneduserid" class="form-label">Assigned User:</label>                    
                    <ValidationMessage For="() => Issue.AssignedUserId" class="text-danger" />

                    <InputSelect @bind-Value="Issue.AssignedUserId" class="form-control">
                        @foreach (User user in Users)
                        {
                            @if (user.Id == Issue.AssignedUserId)
                            {
                                <option selected value="@user.Id">@user.Name</option>
                            }
                            else
                            {
                                <option value="@user.Id">@user.Name</option>
                            }
                        }
                    </InputSelect>
                </div>           

                Tags                
                @if (Issue.Tags != null)
                {
                    @foreach (TagReference tagReference in Issue.Tags)
                    {
                        @(GetTagName(tagReference))                     
                    }                
                }

                Tracking Users                
                @if (Issue.TrackingUsers != null)
                {
                    @foreach (UserReference userReference in Issue.TrackingUsers)
                    {
                        @(GetUserName(userReference))
                    }                
                }

                <button type="submit" class="btn btn-primary">Save</button>
            </EditForm>

            <IssueCommentsObject IssueId="@Id" IssueCommentList="@IssueCommentList"></IssueCommentsObject>
        </div>
    </div>
}

<div>
    <a href="/issues">Back to List</a>
</div>

@code {
    [SupplyParameterFromQuery]
    private string Id { get; set; }

    [SupplyParameterFromForm]
    private Issue? Issue { get; set; }

    private List<IssueStatus> IssueStatuses = new();
    private List<IssueType> IssueTypes = new();
    private List<ProjectComponent> ProjectComponents = new();
    private List<Project> Projects = new();
    private List<Tag> Tags = new();
    private List<User> Users = new();

    //private List<IssueComment> IssueComments = new();
    private IssueCommentList IssueCommentList = new();

    protected override async Task OnParametersSetAsync()
    {
        IssueCommentList.List = await IssueCommentService.GetByIssueAsync(Issue.Id);    

        // Load data
        IssueStatuses = await IssueStatusService.GetAllAsync();
        IssueTypes = await IssueTypeService.GetAllAsync();
        ProjectComponents = await ProjectComponentService.GetAllAsync();
        Projects = await ProjectService.GetAllAsync();
        Tags = await TagService.GetAllAsync();
        Users = await UserService.GetAllAsync();

        await base.OnParametersSetAsync();
    }

    protected override async Task OnInitializedAsync()
    {
        using var context = DbFactory.CreateDbContext();
        Issue ??= await context.Issue.FirstOrDefaultAsync(m => m.Id == Id);

        if (Issue is null)
        {
            NavigationManager.NavigateTo("notfound");
        }
    }

    // To protect from overposting attacks, enable the specific properties you want to bind to.
    // For more information, see https://learn.microsoft.com/aspnet/core/blazor/forms/#mitigate-overposting-attacks.
    private async Task UpdateIssue()
    {        
        using var context = DbFactory.CreateDbContext();
        context.Attach(Issue!).State = EntityState.Modified;

        try
        {
            await context.SaveChangesAsync();

            // Send Issue Assigned email
            if (!String.IsNullOrEmpty(Issue.AssignedUserId))
            {
                EmailRequestService.AddIssueAssignedAsync(Issue);   
            }
        }
        catch (DbUpdateConcurrencyException)
        {
            if (!IssueExists(Issue!.Id))
            {
                NavigationManager.NavigateTo("notfound");
            }
            else
            {
                throw;
            }
        }

        NavigationManager.NavigateTo("/issues");
    }

    private bool IssueExists(string id)
    {
        using var context = DbFactory.CreateDbContext();
        return context.Issue.Any(e => e.Id == id);
    }

    private string GetTagName(TagReference tagReference)
    {
        return Tags.First(t => t.Id == tagReference.TagId).Name;
    }

    private string GetUserName(UserReference userReference)
    {
        return Users.First(u => u.Id == userReference.UserId).Name;
    }
}
