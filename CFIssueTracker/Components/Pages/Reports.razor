@page "/reports"
@using CFIssueTrackerCommon.Interfaces
@using CFIssueTrackerCommon.Models
@inject IIssueService IssueService
@inject IIssueStatusService IssueStatusService
@inject IIssueTypeService IssueTypeService
@inject IMetricService MetricService
@inject IMetricsTypeService MetricsTypeService 
@inject IProjectComponentService ProjectComponentService
@inject IProjectService ProjectService
@inject IUserService UserService

@inject IJSRuntime JS

@rendermode InteractiveServer

<h3>Reports</h3>

<label for="metricstype">Report:</label>
<InputSelect @bind-Value="@MetricsTypeId">
    @foreach (MetricsType metricsType in MetricsTypes)
    {
        @if (metricsType.Id == MetricsTypeId)
        {
            <option selected value="@metricsType.Id">@metricsType.Name</option>
        }
        else
        {
            <option value="@metricsType.Id">@metricsType.Name</option>
        }
    }
</InputSelect>

<ChartObject MetricsTypeId="@MetricsTypeId"></ChartObject>

@code {


    private List<MetricsType> MetricsTypes = new();

    /// <summary>
    /// Selected metrics type
    /// </summary>
    private string _metricsTypeId = String.Empty;
    public string MetricsTypeId
    {
        get { return _metricsTypeId; }
        set
        {
            if (_metricsTypeId != null)
            {
                _metricsTypeId = value;
                //Task.Factory.StartNew(() => DisplayReportAsync(_metricsTypeId));
            }
        }
    }
   
    protected override async Task OnInitializedAsync()
    {
        MetricsTypes = MetricsTypeService.GetAll();

        MetricsTypeId = MetricsTypes.First().Id;
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
         //await DisplayReportAsync(MetricsTypeId);                    

         MetricsTypeId = MetricsTypes.First().Id;       
    }
}
