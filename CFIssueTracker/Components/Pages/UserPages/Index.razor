@page "/users"
@using Microsoft.EntityFrameworkCore
@using Microsoft.AspNetCore.Components.QuickGrid
@using CFIssueTrackerCommon.Data
@using CFIssueTrackerCommon.EntityWriter
@using CFIssueTrackerCommon.Interfaces;
@using CFIssueTrackerCommon.Models
@using CFIssueTracker.Data
@using CFUtilities
@inject IDbContextFactory<CFIssueTrackerContext> DbFactory
@inject IUserService UserService

@using System.IO
@inject IJSRuntime JS

@attribute [Authorize(Roles = "Administrator")]

<script>
    window.downloadFileFromStream = async (fileName, contentStreamReference) =>
    {
    const arrayBuffer = await contentStreamReference.arrayBuffer();
    const blob = new Blob([arrayBuffer]);
    const url = URL.createObjectURL(blob);
    const anchorElement = document.createElement('a');
    anchorElement.href = url;
    anchorElement.download = fileName ?? '';
    anchorElement.click();
    anchorElement.remove();
    URL.revokeObjectURL(url);
    }
</script>

<PageTitle>Index</PageTitle>

<h1>User List</h1>

<ActivityIndicator IsBusy="@IsBusy"/>

<p>
    <a href="users/create">Create New</a>
    <button @onclick="DownloadCSVAsync">Download</button>
</p>

<QuickGrid Class="table" Items="@UsersQueryable">
    <PropertyColumn Property="user => user.Name" />
    <PropertyColumn Property="user => user.Email" />
    <TemplateColumn Title="Activeeee">
        @if (context.Active)
        {
            <input type="checkbox" checked />
        }
        else
        {
            <input type="checkbox" />
        }
    </TemplateColumn>

    <TemplateColumn Context="user">
        <a href="@($"users/edit?id={user.Id}")">Edit</a> |
        <a href="@($"users/details?id={user.Id}")">Details</a> |
        <a href="@($"users/delete?id={user.Id}")">Delete</a>
    </TemplateColumn>
</QuickGrid>

@code {
    //private CFIssueTrackerContext context = default!;

    private IQueryable<User>? UsersQueryable;

    private bool IsBusy { get; set; }

    protected override void OnInitialized()
    {
        //context = DbFactory.CreateDbContext();

        UsersQueryable = UserService.GetAll().AsQueryable();
    }

    private async Task DownloadCSVAsync()
    {
        using (var session = new DisposableActionsSession())
        {
            IsBusy = true;
            session.AddAction(() => IsBusy = false);

            // Get file stream
            var tempFile = Path.GetTempFileName();
            session.AddAction(() =>
            {
                if (File.Exists(tempFile)) File.Delete(tempFile);
            });

            var entityWriter = new CSVUserWriter(tempFile, (Char)9, System.Text.Encoding.UTF8);
            entityWriter.Write(UsersQueryable.ToList());
            var fileStream = File.OpenRead(tempFile);

            using var streamRef = new DotNetStreamReference(stream: fileStream);

            await JS.InvokeVoidAsync("downloadFileFromStream", "Users.txt", streamRef);
        }
    }

    //@implements IAsyncDisposable
    //public async ValueTask DisposeAsync() => await context.DisposeAsync();
}
