@page "/users/create"
@using Microsoft.EntityFrameworkCore
@using CFIssueTrackerCommon.Constants
@using CFIssueTrackerCommon.Data
@using CFIssueTrackerCommon.Interfaces
@using CFIssueTrackerCommon.Models
@inject IDbContextFactory<CFIssueTrackerContext> DbFactory
@inject NavigationManager NavigationManager
@inject IAuditEventService AuditEventService
@inject IAuditEventTypeService AuditEventTypeService
@inject ISystemValueTypeService SystemValueTypeService

@attribute [Authorize(Roles = "Administrator")]

<PageTitle>Create</PageTitle>

<h1>Create</h1>

<h2>User</h2>
<hr />
<div class="row">
    <div class="col-md-4">
        <EditForm method="post" Model="User" OnValidSubmit="AddUser" FormName="create" Enhance>
            <DataAnnotationsValidator />
            <ValidationSummary class="text-danger" role="alert"/>
            <div class="mb-3">
                <label for="name" class="form-label">Name:</label> 
                <InputText id="name" @bind-Value="User.Name" class="form-control" /> 
                <ValidationMessage For="() => User.Name" class="text-danger" /> 
            </div>        
            <div class="mb-3">
                <label for="email" class="form-label">Email:</label> 
                <InputText id="email" @bind-Value="User.Email" class="form-control" /> 
                <ValidationMessage For="() => User.Email" class="text-danger" /> 
            </div>        
            <div class="mb-3">
                <label for="active" class="form-label">Active:</label> 
                <InputCheckbox id="active" @bind-Value="User.Active" class="form-check-input" /> 
                <ValidationMessage For="() => User.Active" class="text-danger" /> 
            </div>        
            <button type="submit" class="btn btn-primary">Create</button>
        </EditForm>
    </div>
</div>

<div>
    <a href="/users">Back to List</a>
</div>

@code {
    [SupplyParameterFromForm]
    private User User { get; set; } = new();

    // To protect from overposting attacks, see https://learn.microsoft.com/aspnet/core/blazor/forms/#mitigate-overposting-attacks.
    private async Task AddUser()
    {
        User.Id = Guid.NewGuid().ToString();       

        using var context = DbFactory.CreateDbContext();
        context.User.Add(User);
        await context.SaveChangesAsync();

        // Send email
        await AddAuditEventUserCreated(User.Id);

        NavigationManager.NavigateTo("/users");
    } 

    private async Task AddAuditEventUserCreated(string userId)
    {
        var auditEventType = await AuditEventTypeService.GetByNameAsync(AuditEventTypeNames.UserCreated);
        var systemValueTypeUserId = await SystemValueTypeService.GetByNameAsync(SystemValueTypeNames.UserId);

        var auditEvent = new AuditEvent()
            {
                Id = Guid.NewGuid().ToString(),
                CreatedDateTime = DateTimeOffset.UtcNow,
                TypeId = auditEventType.Id,
                Parameters = new List<AuditEventParameter>()
                    {
                        new AuditEventParameter()
                        {
                            Id = Guid.NewGuid().ToString(),
                            SystemValueTypeId = systemValueTypeUserId.Id,
                            Value = userId
                        }
                    }
            };
        await AuditEventService.AddAsync(auditEvent);
    }
}
